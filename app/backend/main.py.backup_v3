# app/backend/main.py - VERSION SIN DEPENDENCIA DE FFMPEG
import os
import base64
import tempfile
import wave
from io import BytesIO
from dotenv import load_dotenv
from flask import Flask, request, jsonify
from flask_cors import CORS
import speech_recognition as sr
import google.generativeai as genai
from gtts import gTTS
import io

# === m√≥dulos internos ===
try:
    from modules.financial_advisor_v3_fixed import get_advisor
except:
    print("[WARNING] Prophet engine no disponible")
    def get_kpis(): return {}
    def predict_serie(x): return []

try:
    from modules.financial_advisor import get_advisor
    financial_advisor = get_advisor()
    FINANCIAL_ENABLED = True
except:
    print("[WARNING] Financial advisor no disponible")
    FINANCIAL_ENABLED = False

# === configuraci√≥n ===
load_dotenv()
app = Flask(__name__)
CORS(app)

GEMINI_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_KEY)
MODEL = genai.GenerativeModel("gemini-2.0-flash-exp")

# Cache simple
response_cache = {}

# ==============================
# üé§ Speech-to-Text MEJORADO (SIN FFMPEG)
# ==============================
def speech_to_text(file_storage):
    """
    Convierte audio a texto sin depender de FFmpeg.
    Usa solo SpeechRecognition nativo.
    """
    r = sr.Recognizer()
    r.energy_threshold = 300
    r.dynamic_energy_threshold = True
    
    try:
        # Leer datos del archivo
        file_storage.seek(0)
        audio_data = file_storage.read()
        filename = getattr(file_storage, 'filename', 'audio.webm')
        
        print(f"[STT] üìù Archivo: {filename} ({len(audio_data)} bytes)")
        
        # Intentar m√©todo 1: Reconocer directamente desde bytes
        try:
            # Crear un AudioFile temporal
            with tempfile.NamedTemporaryFile(suffix='.webm', delete=False) as temp_file:
                temp_file.write(audio_data)
                temp_path = temp_file.name
            
            try:
                # Intentar leer como audio directamente
                with sr.AudioFile(temp_path) as source:
                    r.adjust_for_ambient_noise(source, duration=0.3)
                    audio = r.record(source)
                
                text = r.recognize_google(audio, language="es-MX")
                print(f"[STT] ‚úÖ Transcrito (m√©todo directo): {text}")
                os.unlink(temp_path)
                return text
                
            except Exception as e:
                print(f"[STT] ‚ö†Ô∏è M√©todo directo fall√≥: {e}")
                os.unlink(temp_path)
        
        except Exception as e:
            print(f"[STT] ‚ö†Ô∏è Error en m√©todo 1: {e}")
        
        # M√©todo 2: Si el archivo ya es WAV, usarlo directamente
        if filename.endswith('.wav'):
            try:
                file_storage.seek(0)
                with sr.AudioFile(file_storage) as source:
                    r.adjust_for_ambient_noise(source, duration=0.3)
                    audio = r.record(source)
                
                text = r.recognize_google(audio, language="es-MX")
                print(f"[STT] ‚úÖ Transcrito (WAV): {text}")
                return text
            except Exception as e:
                print(f"[STT] ‚ö†Ô∏è Error en m√©todo WAV: {e}")
        
        # M√©todo 3: Intentar con pydub solo si est√° disponible
        try:
            from pydub import AudioSegment
            print("[STT] üîÑ Intentando conversi√≥n con pydub...")
            
            # Guardar archivo temporal
            with tempfile.NamedTemporaryFile(suffix='.webm', delete=False) as temp_input:
                temp_input.write(audio_data)
                temp_input_path = temp_input.name
            
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
                temp_wav_path = temp_wav.name
            
            try:
                # Convertir a WAV
                audio_segment = AudioSegment.from_file(temp_input_path)
                audio_segment = audio_segment.set_channels(1).set_frame_rate(16000)
                audio_segment.export(temp_wav_path, format='wav')
                
                # Reconocer
                with sr.AudioFile(temp_wav_path) as source:
                    r.adjust_for_ambient_noise(source, duration=0.3)
                    audio = r.record(source)
                
                text = r.recognize_google(audio, language="es-MX")
                print(f"[STT] ‚úÖ Transcrito (pydub): {text}")
                
                # Limpiar
                os.unlink(temp_input_path)
                os.unlink(temp_wav_path)
                return text
                
            except Exception as e:
                print(f"[STT] ‚ö†Ô∏è Error en conversi√≥n pydub: {e}")
                try:
                    os.unlink(temp_input_path)
                    os.unlink(temp_wav_path)
                except:
                    pass
        
        except ImportError:
            print("[STT] ‚ö†Ô∏è pydub no disponible")
        
        # Si todo fall√≥
        print("[STT] ‚ùå No se pudo procesar el audio")
        return None
        
    except sr.UnknownValueError:
        print("[STT] ‚ö†Ô∏è No se pudo entender el audio")
        return None
    except sr.RequestError as e:
        print(f"[STT] ‚ùå Error en servicio de Google: {e}")
        return None
    except Exception as e:
        print(f"[STT] ‚ùå Error general: {e}")
        import traceback
        traceback.print_exc()
        return None

# ==============================
# üß† Gemini con An√°lisis Financiero
# ==============================
def ask_gemini_fast(question: str) -> str:
    """Genera respuesta con an√°lisis financiero integrado"""
    
    cache_key = question.lower().strip()
    if cache_key in response_cache:
        print("[Gemini] üì¶ Respuesta desde cache")
        return response_cache[cache_key]
    
    try:
        kpis = get_kpis()
    except:
        kpis = {}
    
    forecast_hint = ""
    question_lower = question.lower()
    
    # Prophet predictions
    if "tipo de cambio" in question_lower or "d√≥lar" in question_lower:
        try:
            preds = predict_serie("tipo_cambio_fix")
            if preds:
                last = preds[-1]
                forecast_hint = f"Tipo de cambio estimado: {last['yhat']:.2f} MXN/USD para {last['ds']}."
        except:
            pass
    elif "tasa" in question_lower or "inter√©s" in question_lower:
        try:
            preds = predict_serie("tasa_referencia")
            if preds:
                last = preds[-1]
                forecast_hint = f"Tasa de referencia estimada: {last['yhat']:.2f}% para {last['ds']}."
        except:
            pass
    
    # üÜï AN√ÅLISIS FINANCIERO
    financial_context = ""
    
    if FINANCIAL_ENABLED:
        # An√°lisis empresarial
        if any(word in question_lower for word in ['empresa', 'negocio', 'ventas', 'utilidad', 'margen', 'estado', 'compa√±√≠a']):
            try:
                empresa_analysis = financial_advisor.analyze_empresa()
                if empresa_analysis:
                    financial_context = f"""
üìä AN√ÅLISIS EMPRESARIAL:
- Estado: {empresa_analysis['estado']} (Score: {empresa_analysis['score']}/100)
- Margen de utilidad: {empresa_analysis['margen_utilidad']:.1f}%
- Crecimiento trimestral: {empresa_analysis['crecimiento_trimestral']:.1f}%
- Utilidad anual: ${empresa_analysis['utilidad_neta']:,.0f} MXN
- {empresa_analysis['descripcion']}

"""
            except Exception as e:
                print(f"[FinAdvisor] ‚ùå Error empresarial: {e}")
        
        # An√°lisis personal
        if any(word in question_lower for word in ['personal', 'ahorro', 'gastos', 'ingresos', 'finanzas personales']):
            try:
                personal_analysis = financial_advisor.analyze_personal()
                if personal_analysis:
                    financial_context += f"""
üí∞ AN√ÅLISIS PERSONAL:
- Estado: {personal_analysis['estado']} (Score: {personal_analysis['score']}/100)
- Tasa de ahorro: {personal_analysis['tasa_ahorro']:.1f}%
- Ahorro mensual: ${personal_analysis['ahorro_mensual']:,.0f} MXN
- Ingresos mensuales: ${personal_analysis['ingresos_mensuales']:,.0f} MXN
- {personal_analysis['descripcion']}

"""
            except Exception as e:
                print(f"[FinAdvisor] ‚ùå Error personal: {e}")
        
        # Recomendaciones
        if any(word in question_lower for word in ['recomendacion', 'recomiend', 'suger', 'consejo', 'invertir', 'pr√©stamo', 'cr√©dito']):
            try:
                if any(word in question_lower for word in ['empresa', 'negocio']):
                    empresa_analysis = financial_advisor.analyze_empresa()
                    recs = financial_advisor.get_recomendaciones_empresa(empresa_analysis)
                    if recs:
                        financial_context += "\nüí° RECOMENDACIONES TOP:\n"
                        for i, rec in enumerate(recs[:2], 1):
                            financial_context += f"{i}. **{rec['titulo']}**: {rec['descripcion']}\n"
                
                if 'personal' in question_lower or not ('empresa' in question_lower or 'negocio' in question_lower):
                    personal_analysis = financial_advisor.analyze_personal()
                    recs = financial_advisor.get_recomendaciones_personal(personal_analysis)
                    if recs:
                        financial_context += "\nüí° RECOMENDACIONES TOP:\n"
                        for i, rec in enumerate(recs[:2], 1):
                            financial_context += f"{i}. **{rec['titulo']}**: {rec['descripcion']}\n"
            except Exception as e:
                print(f"[FinAdvisor] ‚ùå Error recomendaciones: {e}")
    
    # Prompt optimizado
    context = f"""Eres un CFO virtual experto en finanzas mexicanas. Responde de forma CONCISA y DIRECTA.

{financial_context}

Datos macro: {kpis}
{forecast_hint}

Reglas:
- Respuestas cortas (m√°ximo 4 oraciones)
- Si hay an√°lisis financiero, √∫salo prominentemente
- Si hay recomendaciones, menci√≥nalas
- Tono profesional pero amigable
- En espa√±ol mexicano
- Da cifras espec√≠ficas cuando las tengas

Pregunta: {question}"""

    try:
        print("[Gemini] üß† Generando respuesta...")
        
        generation_config = {
            "temperature": 0.7,
            "max_output_tokens": 250,
        }
        
        resp = MODEL.generate_content(context, generation_config=generation_config)
        answer = resp.text.strip()
        
        response_cache[cache_key] = answer
        if len(response_cache) > 100:
            response_cache.pop(next(iter(response_cache)))
        
        print(f"[Gemini] ‚úÖ Respuesta generada")
        return answer
        
    except Exception as e:
        print(f"[Gemini] ‚ùå Error: {e}")
        return "Lo siento, no pude generar una respuesta en este momento."

# ==============================
# üîä Text-to-Speech
# ==============================
def synthesize_voice_fast(text: str) -> str:
    """Convierte texto a voz con gTTS"""
    try:
        print("[TTS] üîä Sintetizando con gTTS...")
        tts = gTTS(text=text, lang='es', slow=False, tld='com.mx')
        audio_fp = io.BytesIO()
        tts.write_to_fp(audio_fp)
        audio_fp.seek(0)
        audio_b64 = base64.b64encode(audio_fp.read()).decode('utf-8')
        print(f"[TTS] ‚úÖ Audio generado")
        return audio_b64
    except Exception as e:
        print(f"[TTS] ‚ùå Error: {e}")
        return None

# ==============================
# üåê ENDPOINTS PRINCIPALES
# ==============================
@app.route("/")
def home():
    return jsonify({
        "status": "ok",
        "message": "FinCortex IA con Asesor Financiero üöÄ",
        "version": "3.1-fixed",
        "features": ["chat", "voice", "financial_analysis", "recommendations"]
    })

@app.route("/ask", methods=["POST"])
def ask():
    """Endpoint principal con an√°lisis financiero integrado"""
    import time
    start_time = time.time()
    
    question = None
    print(f"\n{'='*60}")
    print(f"[REQUEST] Nueva petici√≥n - {time.strftime('%H:%M:%S')}")
    
    if request.content_type and request.content_type.startswith("application/json"):
        data = request.get_json()
        question = data.get("question", "").strip()
        print(f"[TEXT] üí¨ Pregunta: {question}")
        
    elif "audio" in request.files:
        print("[AUDIO] üé§ Procesando audio...")
        file = request.files["audio"]
        print(f"[AUDIO] Nombre: {file.filename}, Tipo: {file.content_type}")
        
        file_bytes = BytesIO(file.read())
        file_bytes.filename = file.filename
        
        question = speech_to_text(file_bytes)
        
        if question:
            print(f"[AUDIO] ‚úÖ Transcrito: {question}")
        else:
            print("[AUDIO] ‚ùå No se pudo transcribir")

    if not question:
        error_msg = "No se pudo transcribir el audio. Verifica que tu micr√≥fono funcione correctamente."
        print(f"[ERROR] {error_msg}")
        return jsonify({
            "error": error_msg,
            "text": "Por favor, intenta hablar m√°s claro o revisa tu micr√≥fono.",
            "audio_base64": None
        }), 400

    answer = ask_gemini_fast(question)
    audio_b64 = synthesize_voice_fast(answer)
    
    elapsed = time.time() - start_time
    print(f"[RESPONSE] ‚úÖ Completado en {elapsed:.2f}s")
    print(f"{'='*60}\n")

    return jsonify({
        "text": answer,
        "audio_base64": audio_b64,
        "processing_time": f"{elapsed:.2f}s"
    })

# ==============================
# üìä ENDPOINTS DE AN√ÅLISIS FINANCIERO
# ==============================

@app.route("/api/finanzas/estado", methods=["GET"])
def get_estado():
    """Obtener estado financiero resumido"""
    if not FINANCIAL_ENABLED:
        return jsonify({'success': False, 'error': 'Financial advisor no disponible'}), 503
    
    try:
        empresa = financial_advisor.analyze_empresa()
        personal = financial_advisor.analyze_personal()
        
        return jsonify({
            'success': True,
            'empresa': {
                'estado': empresa['estado'],
                'score': empresa['score'],
                'margen': empresa['margen_utilidad'],
                'descripcion': empresa['descripcion']
            },
            'personal': {
                'estado': personal['estado'],
                'score': personal['score'],
                'tasa_ahorro': personal['tasa_ahorro'],
                'descripcion': personal['descripcion']
            }
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route("/api/finanzas/analisis", methods=["GET"])
def get_analisis():
    """An√°lisis financiero completo con recomendaciones"""
    if not FINANCIAL_ENABLED:
        return jsonify({'success': False, 'error': 'Financial advisor no disponible'}), 503
    
    try:
        resultado = financial_advisor.get_analisis_completo()
        return jsonify({'success': True, 'data': resultado})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route("/api/finanzas/recomendaciones", methods=["GET"])
def get_recomendaciones():
    """Solo recomendaciones"""
    if not FINANCIAL_ENABLED:
        return jsonify({'success': False, 'error': 'Financial advisor no disponible'}), 503
    
    tipo = request.args.get('tipo', 'todas')
    
    try:
        recomendaciones = {
            'empresa': [],
            'personal': []
        }
        
        if tipo in ['empresa', 'todas']:
            empresa = financial_advisor.analyze_empresa()
            recomendaciones['empresa'] = financial_advisor.get_recomendaciones_empresa(empresa)
        
        if tipo in ['personal', 'todas']:
            personal = financial_advisor.analyze_personal()
            recomendaciones['personal'] = financial_advisor.get_recomendaciones_personal(personal)
        
        return jsonify({'success': True, 'recomendaciones': recomendaciones})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route("/kpis")
def kpis():
    try:
        return jsonify(get_kpis())
    except:
        return jsonify({'error': 'KPIs no disponibles'}), 503

@app.route("/forecast/<serie>")
def forecast(serie):
    try:
        preds = predict_serie(serie)
        return jsonify(preds)
    except:
        return jsonify({'error': 'Forecast no disponible'}), 503

# ==============================
# üöÄ Run
# ==============================
if __name__ == "__main__":
    print("\n" + "="*60)
    print("üöÄ FINCORTEX VOICE - CON ASESOR FINANCIERO v3.1")
    print("‚ö° Velocidad optimizada | üé§ Voz sin FFmpeg | üìä An√°lisis")
    print("="*60)
    print("\nüìù IMPORTANTE:")
    print("   - FFmpeg NO es necesario para la versi√≥n b√°sica")
    print("   - Si tienes FFmpeg, instala: pip install pydub")
    print("   - Sin FFmpeg, solo acepta audio WAV nativo")
    print(f"   - Financial Advisor: {'‚úÖ ACTIVO' if FINANCIAL_ENABLED else '‚ùå DESACTIVADO'}")
    print("\n" + "="*60 + "\n")
    
    app.run(debug=False, host="0.0.0.0", port=8000, threaded=True)
